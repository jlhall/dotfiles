set noswapfile

call plug#begin('~/.vim/plugged')
" list plugins for vim-plug below

" themes
Plug 'neutaaaaan/iosvkem' " dark theme, soft blues, etc. :: iosvkem
Plug 'wesgibbs/vim-irblack' " dark theme, like a green/orange :: ir_black
Plug 'kirecek/vim-kxxe256' " dark theme, like a green/purple :: kxxe
Plug 'chase/focuspoint-vim' " dark theme, blue/red/gold/green, and paler versions :: focuspoint
Plug 'ntk148v/vim-horizon' " dark theme, green, pink, pale gold, pale red :: horizon
Plug 'treycucco/vim-monotonic' " dark theme, white/grey/blue :: monotonic
Plug 'vim-scripts/bw.vim' " light theme, black/underline :: bw
Plug 'logico-software/typewriter' " light theme, black/grey :: typewriter

" everything else
Plug 'pangloss/vim-javascript' " for react
Plug 'mxw/vim-jsx' " for react
Plug 'davidhalter/jedi-vim' " for python
Plug 'skywind3000/asyncrun.vim' " async shell commands
Plug 'w0rp/ale' " syntax linting
Plug 'tpope/vim-fugitive' " git wrapper (see mappings below)
Plug 'airblade/vim-gitgutter' " sign column/gutter showing git diff (for inline viewing)
Plug 'tpope/vim-unimpaired' " handy mappings
Plug 'tpope/vim-commentary' " comment mappings (gcc comments a line, gc for motion..gcap for paragraph, gc visual mode)
Plug 'jszakmeister/vim-togglecursor' " support for cursor shape changing (based on vim mode)
Plug 'sheerun/vim-polyglot' " syntax highlighting, indenting
Plug 'tpope/vim-surround' " surroundings mapping (change 'hello world' to <p>hello world</p> with just cs'<p>)
Plug 'thaerkh/vim-indentguides' " indent guides ffs | = tab, choppy pipe = space
Plug 'srstevenson/vim-picker' " fuzzy file finder (leader p to fuzzy file find)
Plug 'tpope/vim-vinegar' " directory tree sprucing up (configs netrw)
Plug 'chrisjohnson/vim-grep' " no thought grepping from within vim (key 'gr')

" ADD NEW PLUGINS HERE
" end of plugin list
call plug#end()            " required

" ----------------------------------------------------------------------------
" Theme
" ----------------------------------------------------------------------------

" DARK BACKGROUND PRESET ITERM

" dark themes
" colorscheme iosvkem " seems washed out
" colorscheme ir_black " maybe too pale
" colorscheme kxxe " purples and green strings really pop
" colorscheme focuspoint " strings and builtins/control structures are nice
" colorscheme horizon " think inverting your normal color prefs
colorscheme monotonic " todo, strings really pop, everything else forces reading DONT FORGET the String change way below

" light themes
" colorscheme bw
" colorscheme typewriter

" Use deoplete.
let g:deoplete#enable_at_startup = 1
" With neosnippets
let g:neosnippet#enable_completed_snippet = 1

" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.

" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Like bufdo but restore the current buffer.
function! BufDo(command)
  let currBuff=bufnr("%")
  execute 'bufdo ' . a:command
  execute 'buffer ' . currBuff
endfunction
com! -nargs=+ -complete=command Bufdo call BufDo(<q-args>)

nnoremap <Leader>ee :call Bufdo("e")<CR>

" Use `tab` key to select completions.  Default is arrow keys.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab to trigger auto completion.  Default suggests completions as you type.
let g:completor_auto_trigger = 0
inoremap <expr> <Tab> Tab_Or_Complete()

" ----------------------------------------------------------------------------
" Tweaks
" ----------------------------------------------------------------------------
let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file

autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix % " async eslint
set clipboard^=unnamed

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

" set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block ..
set autoread               " Set to auto read when a file is changed from the outside

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" exit to normal mode with 'jj'
inoremap jj <ESC>

" search visual block text with '//'
vnoremap // y/<C-R>"<CR>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" GENERIC MAPPINGS

" Map space to leader
let mapleader = " "

" Should be default
nnoremap Y y$

" Various mappings
nnoremap <Leader>w :w<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>4 :vertical resize 300<CR>
nnoremap <Leader>3 :vertical resize 250<CR>
nnoremap <Leader>2 :vertical resize 200<CR>
nnoremap <Leader>1 :vertical resize 100<CR>
nnoremap <Leader>rd :redraw!<CR>
nnoremap <Leader>rc :source ~/.vimrc<CR>
nnoremap <Leader>tt :tabedit<CR>
nnoremap <Leader>tb :TagbarToggle<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gdiff<CR>
nnoremap <Leader>dg :diffget<CR>
nnoremap <Leader>dp :diffput<CR>
nnoremap <Leader>vs :vsplit<CR>
nnoremap <Leader>hs :split<CR>
nnoremap <Leader>bq :bd<CR>
nnoremap <Leader>no :noh<CR>
" Resizes all splits based on the overall split 'situation'
nnoremap <Leader>z <C-w>=<CR>
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" File and pattern finding
nnoremap <Leader>p :PickerEdit<CR>
nnoremap <Leader>j :PickerBuffer<CR>

function! SwitchToNextBuffer(incr)
  let help_buffer = (&filetype == 'help')
  let current = bufnr("%")
  let last = bufnr("$")
  let new = current + a:incr
  while 1
    if new != 0 && bufexists(new) && ((getbufvar(new, "&filetype") == 'help') == help_buffer)
      execute ":buffer ".new
      break
    else
      let new = new + a:incr
      if new < 1
        let new = last
      elseif new > last
        let new = 1
      endif
      if new == current
        break
      endif
    endif
  endwhile
endfunction
nnoremap <Leader>nb :call SwitchToNextBuffer(1)<CR>
nnoremap <Leader>vb :call SwitchToNextBuffer(-1)<CR>

function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction
function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr("%")
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr("%")
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf
endfunction
nnoremap <Leader>mw :call MarkWindowSwap()<CR>
nnoremap <Leader>sw :call DoWindowSwap()<CR>

" Ensure fugitive works, avoid loading EditorConfig for any remote files over
" ssh.
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" if executable("rg")
  " rg uses multiple threads to search. This has two notable consequences
  "   1. The search is fast.
  "   2. The result order is nondeterministic.
  "
  " rg has the option to return sorted results, but that runs the search in a
  " single thread and is too slow.
  "
  " This is a dirty hack that lets me search in parallel and then sort the
  " output. The hacky part is figuring out how to use a pipe when setting the
  " grep program.  The pipe is escaped as `\\\|` an escaped backslash and an
  " escaped pipe produce `\|`, which undergoes one more round of processing to
  " end up with `|`.
  "
  " Since the sort is O(nlog(n)) on the number of results, the
  " added time is negligible on specific search and is not that bad on general
  " ones.

  " set grepprg=rg\ --vimgrep\ $*\\\|sort
  " set grepformat^=%f,%l:%c:%m

  " Nicer than built-in :grep.
  " command! -nargs=+ Gr execute "silent grep <args>" | copen

  " Smart-case and literal string.
  " command! -nargs=+ Ga execute "Gr -SF <args>"

  " Only look in tests.
  " command! -nargs=+ Gt execute "Ga -g '*tests*' <args>"

  " Don't look in tests.
  " command! -nargs=+ G execute "Ga -g '!*tests*' <args>"
" endif

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=indent,eol,start      " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
syntax on                  " Syntax highlighting
set mouse=a                " enable mouse scroll

set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc

" for debugging highlight groups (put cursor on char and press F10, make sure it's the functional F10
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

hi StatusLine ctermbg=78 ctermfg=16
hi StatusLineNC ctermbg=240 ctermfg=16
" turn the below on for monotonic theme
hi String ctermbg=None ctermfg=78

set guicursor+=n-v-c-i:blinkwait5-blinkon4-blinkoff1

" ----------------------------------------------------------------------------
" visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch               " highlight searches
set visualbell             " shut the fuck up


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
