set noswapfile

call plug#begin('~/.vim/plugged')
" list plugins for vim-plug
Plug 'joshdick/onedark.vim' " pretty retro theme (it's so hot right now)
Plug 'neomake/neomake' " syntax linting
Plug 'scrooloose/nerdtree' " directory tree view (see mappings below)
Plug 'tpope/vim-fugitive' " git wrapper (see mappings below)
Plug 'tpope/vim-unimpaired' " handy mappings
Plug 'tpope/vim-commentary' " comment mappings (gcc comments a line, gc for motion..gcap for paragraph, gc visual mode)
Plug 'srstevenson/vim-picker' " fuzzy file finder (leader p to fuzzy file find)
Plug 'editorconfig/editorconfig-vim' " editorconfig.org (consistent style and plugin definitions)
Plug 'jszakmeister/vim-togglecursor' " support for cursor shape changing (based on vim mode)
Plug 'sheerun/vim-polyglot' " syntax highlighting, indenting
Plug 'airblade/vim-gitgutter' " sign column/gutter showing git diff (for inline viewing)
Plug 'tpope/vim-surround' " surroundings mapping (change 'hello world' to <p>hello world</p> with just cs'<p>)
Plug 'jremmen/vim-ripgrep' " standard rg use is below, but a more ~vim-picker style is reflected by this plugin
Plug 'Valloric/YouCompleteMe' " gotta have that autocomplete nam' sayin'?

" ADD NEW PLUGINS HERE
" end of plugin list
call plug#end()            " required

colorscheme onedark " setting colorscheme to onedark

" Neomake battery-aware config (nw = writing buffer or after 1s post normal mode change, w = writing buffer)
if system('pmset -g ps | head -1') ==? 'AC Power'
  call neomake#configure#automake('nw', 1000)
else
  call neomake#configure#automake('w')
endif

" Nerdtree config
let NERDTreeIgnore = ['\.pyc$']


" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

" set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block ..
set autoread               " Set to auto read when a file is changed from the outside

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>


" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" GENERIC MAPPINGS

" Map space to leader
let mapleader = " "

" Should be default
nnoremap Y y$

" Various mappings
nnoremap <Leader>w :w<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>g :vertical resize 101<CR>
nnoremap <Leader>G :vertical resize 105<CR>
nnoremap <Leader>rd :redraw!<CR>
nnoremap <Leader>rc :source ~/.vimrc<CR>
nnoremap <Leader>tt :tabedit<CR>
nnoremap <Leader>tb :TagbarToggle<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>ge :Gdiff<CR>
nnoremap <Leader>dg :diffget<CR>
nnoremap <Leader>dp :diffput<CR>
nnoremap <Leader>vs :vsplit<CR>
nnoremap <Leader>hs :split<CR>
nnoremap <Leader>bq :bd<CR>
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" File and pattern finding
nnoremap <Leader>p :PickerEdit<CR>
nnoremap <Leader>j :PickerBuffer<CR>
function! RgArg(n)
  exe "Rg ".a:n
endfunction
nnoremap <leader>rg :call RgArg(input('Search Pattern: '))<CR>
map <C-n> :NERDTreeToggle<CR>
map <Leader>nf :NERDTreeFind<CR>
function! SwitchToNextBuffer(incr)
  let help_buffer = (&filetype == 'help')
  let current = bufnr("%")
  let last = bufnr("$")
  let new = current + a:incr
  while 1
    if new != 0 && bufexists(new) && ((getbufvar(new, "&filetype") == 'help') == help_buffer)
      execute ":buffer ".new
      break
    else
      let new = new + a:incr
      if new < 1
        let new = last
      elseif new > last
        let new = 1
      endif
      if new == current
        break
      endif
    endif
  endwhile
endfunction
nnoremap <Leader>nb :call SwitchToNextBuffer(1)<CR>
nnoremap <Leader>vb :call SwitchToNextBuffer(-1)<CR>
" Ensure fugitive works, avoid loading EditorConfig for any remote files over
" ssh.
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" if executable("rg")
  " rg uses multiple threads to search. This has two notable consequences
  "   1. The search is fast.
  "   2. The result order is nondeterministic.
  "
  " rg has the option to return sorted results, but that runs the search in a
  " single thread and is too slow.
  "
  " This is a dirty hack that lets me search in parallel and then sort the
  " output. The hacky part is figuring out how to use a pipe when setting the
  " grep program.  The pipe is escaped as `\\\|` an escaped backslash and an
  " escaped pipe produce `\|`, which undergoes one more round of processing to
  " end up with `|`.
  "
  " Since the sort is O(nlog(n)) on the number of results, the
  " added time is negligible on specific search and is not that bad on general
  " ones.

  " set grepprg=rg\ --vimgrep\ $*\\\|sort
  " set grepformat^=%f,%l:%c:%m

  " Nicer than built-in :grep.
  " command! -nargs=+ Gr execute "silent grep <args>" | copen

  " Smart-case and literal string.
  " command! -nargs=+ Ga execute "Gr -SF <args>"

  " Only look in tests.
  " command! -nargs=+ Gt execute "Ga -g '*tests*' <args>"

  " Don't look in tests.
  " command! -nargs=+ G execute "Ga -g '!*tests*' <args>"
" endif

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=indent,eol,start      " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
syntax on                  " Syntax highlighting
set mouse=a                " enable mouse scroll

" ----------------------------------------------------------------------------
" visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch               " highlight searches
set visualbell             " shut the fuck up


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
